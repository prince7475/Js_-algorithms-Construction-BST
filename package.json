{
  "name": "Js_-algorithms-Construction-BST",
  "version": "1.0.0",
  "description": "​ 1 const program = require(\"./program\"); 2 const chai = require(\"chai\"); 3 ​ 4 const test1 = new program.BST(10).insert(5).insert(15).insert(5).insert(2) 5 .insert(14).insert(22); 6 ​ 7 const test2 = new program.BST(10).insert(15).insert(11).insert(22).remove(10); 8 ​ 9 const test3 = new program.BST(10).insert(5).insert(7).insert(2).remove(10); 10 ​ 11 const test4 = new program.BST(10).insert(5).insert(15).insert(22).insert(17) 12 .insert(34).insert(7).insert(2).insert(5).insert(1).insert(35).insert(27) 13 .insert(16).insert(30).remove(22).remove(17); 14 ​ 15 function inOrderTraverse(tree, array) { 16   if (tree !== null) { 17     inOrderTraverse(tree.left, array); 18     array.push(tree.value); 19     inOrderTraverse(tree.right, array); 20   } 21   return array; 22 } 23 ​ 24 it('Test Case #1', function() { 25   chai.expect(test1.left.value).to.deep.equal(5); 26 }); 27 ​ 28 it('Test Case #2', function() { 29   chai.expect(test1.right.right.value).to.deep.equal(22); 30 }); 31 ​ 32 it('Test Case #3', function() { 33   chai.expect(test1.right.left.value).to.deep.equal(14); 34 }); 35 ​ 36 it('Test Case #4', function() { 37   chai.expect(test1.left.right.value).to.deep.equal(5); 38 }); 39 ​ 40 it('Test Case #5', function() { 41   chai.expect(test1.left.left.value).to.deep.equal(2); 42 }); 43 ​ Output:Custom OutputRaw Output Run your code when you feel ready. Question:JavaScriptPythonC++JavaGoQuestions List",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/prince7475/Js_-algorithms-Construction-BST.git"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/prince7475/Js_-algorithms-Construction-BST/issues"
  },
  "homepage": "https://github.com/prince7475/Js_-algorithms-Construction-BST#readme",
  "dependencies": {
    "chai": "^4.1.2",
    "mocha": "^5.2.0"
  }
}
